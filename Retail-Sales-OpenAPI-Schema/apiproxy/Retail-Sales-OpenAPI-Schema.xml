<APIProxy revision="1" name="Retail-Sales-OpenAPI-Schema">
    <DisplayName></DisplayName>
    <Description># Introduction&#xA;    &#xA;    This is a RESTful API to enable the sale of Viasat products to new customers.&#xA;    The provided features will support creation of a new customer, selecting products, and submitting an order for new service.&#xA;    &#xA;    The following sequence diagram shows the recommended flow for sales to new customers.  These functions are described in more detail in the Available Functions section and in the body of the schema.&#xA;    &#xA;    &#xA;    &lt;/br&gt;&#xA;    ![newcust](../api-docs-assets/new-customer-sequence.png)&#xA;    &lt;/br&gt;&#xA;    &#xA;    (file:///Users/jsanderson/Documents/GitHub/pal-openapi/packages/retail-sales-router/api-docs/assets/new-customer-sequence.png)&#xA;    &#xA;    ---&#xA;    &#xA;    ## API Concepts&#xA;    &#xA;    ### Security Requirements for Accessing PAL APIs&#xA;    &#xA;    PAL APIs require:&#xA;    &#xA;    Authentication credentials to generate a token(JWT). The token expires after 2 hours. It&#39;s a good practice to reuse an API token for a series of API calls.&#xA;    To generate a token, configure a GET call with a Basic Auth containing your API account (AKA &#34;stripe&#34;) username and password (sent to you via Lancer secure email). These are different credentials than the ones used to view the API documentation Web site.&#xA;    &#xA;        For testing, use the nonprod URL:&#xA;            (nonprod) https://jwt.viasat.io/v1/token?stripe=vail-nonprod&amp;name=pal-user&#xA;    &#xA;    &#xA;        For live calls, use the prod URL:&#xA;            (prod) https://jwt.viasat.io/v1/token?stripe=vail&amp;name=pal-user&#xA;    &#xA;    &#xA;    ### Resources&#xA;    A  *resource* represents the subject of a RESTful request.&#xA;    A resource is an object with a type, associated data, relationships&#xA;    to other resources, and a set of methods that operate on it.&#xA;    In the PAL API, a resource is typically associated with a data model object.&#xA;    Sub-resources are subsets of objects for a first level resource.&#xA;    These usually represent collections of data associated with the base level&#xA;    resource. You can think of these as different types of searches on the objects&#xA;    making up a resource.&#xA;    &#xA;    ### Patch Operations&#xA;    &#xA;    Modifying existing fields in a resource is supported using an HTTP PATCH method.&#xA;    This API uses the JSON Patch convention.  The input to the patch method consists&#xA;    of an array of commands that only specify fields that need to be&#xA;    changed instead of an entire object.&#xA;    &#xA;    Here is an example of those commands modifying a customer field.&#xA;    ```json&#xA;      [&#xA;         {&#xA;           &#34;op&#34;: &#34;add&#34;,&#xA;           &#34;path&#34;: &#34;/contact/primary&#34;,&#xA;           &#34;value&#34;: {&#34;email&#34;: &#34;name@somewhere.com&#34;}&#xA;    &#xA;         }&#xA;     ]&#xA;    ```&#xA;    &#xA;    &#34;op&#34; specifies the operation to be performed; &#34;add&#34;, &#34;remove&#34;, or &#34;replace&#34;&#xA;    &#xA;    &#34;path&#34; refers to the relative location in the document of the field or object up&#xA;     the operation will be peroformd.&#xA;    &#xA;     &#34;value&#34;, if specified, provides the&#xA;     data that will repolace or be added at the indicated path.&#xA;    &#xA;    &#xA;    &#xA;    &#xA;    ### Available Functions&#xA;    &#xA;    The following table describes functions supported in the API.&#xA;    To find implementation details such as parameters and required fields,&#xA;    use the path name in the URI column to locate the method definition in the&#xA;    `paths` section below.&#xA;    &#xA;    &#xA;    | Function Name | URI  | HTTP Method | Description |&#xA;    |------------ | ------------ | ---------- | ------------- |&#xA;    | validate customer address  | /v1/geo/addresses        | get | Evaluate that a given input address is complete and valid. &lt;br&gt;  Return addresses with any necessary corrections. |&#xA;    | validate shipping address  | /v1/geo/addresses        | get | Evaluate that a given input address is complete and valid. &lt;br&gt;  Return addresses with any necessary corrections. |&#xA;    |  get partner agreements  |  /v1/retail/agreements/agreements | get   | Retrieve agreements. Use agreement_type SALES for preview-products, avaialbe-products, add-ons, and closing-offers operations. Use agreement_type FULFILLMENT for available-appointments operations.&#39;|&#xA;    | preview product plans  | /v1/sales/products/preview-products  | get | List of products available based on sales_agreement/location combination - specifically for plan previews (No customer info) |&#xA;    | get available internet plans  | /v1/sales/products/available-products  | get | List of products available based on sales_agreement/location combination |&#xA;    | create customer |    /v1/customer/customers | post | Add a customer |&#xA;    | get customer | /v1/customer/customers/{customer_id} | get | Retrieve customer details based on customer_id |&#xA;    | update customer | /v1/customer/customers/{customer_id} | patch | Change customer details based on customer_id |&#xA;    | add plan to shopping cart |  /v1/sales/cart/items | post | Add plan to the shopping cart.  Create shopping cart if it does not exist. |&#xA;    | remove plan from shopping cart | /v1/sales/cart/{shopping_cart_id}/items/{product_candidate_id} | delete | remove indicated item from shopping cart |&#xA;    | check for possible add on products |  /v1/sales/products/add-ons | get | List of add-ons available based on sales_agreement/product_instance_id|&#xA;    | get possible closing offers | /v1/sales/products/closing-offers | get | List of closing offers available based on sales_agreement and chosehn internet product (product_instance_id) |&#xA;    | get tax jurisdictions | /v1/billing/tax-codes | get | Retrieve specific tax codes associated with an address  |&#xA;    | get available appointments | /v1/fulfillment/appointments | get | List available schedule dates from which the customer can choose to schedule an appointment for a work order |&#xA;    | get work order details | /v1/fulfillment/work-orders | get | List details for one or multiple work orders for a customer |&#xA;    | schedule appointment | /v1/fulfillment/appointments/schedule | post | Schedule an appointment for a work order using an available schedule date range |&#xA;    | update order with appointment | /v1/sales/cart/{shopping_cart_id}/items/{product_candidate_id} | patch | Add selected appointment to the order input |&#xA;    | submit order |  /v1/retail/orders  | post | submit an order and consolidate a collection of information to support the activation of the customer&#39;&#39;s service, including order line items along with additional products, service appointment for installation, and sales agreement ID. |&#xA;    | create payment transaction | /v1/payment/transactions | post | Create a payment transaction with required details for a one time or recurring payment.  Payment type information like credit card or ACH are NOT included in this step.  |&#xA;    | authorize payment | v1/payment-pci/transactions/{payment_transaction_id} | post | Use payment transaction to authorize payment and submit payment type information. Path included for reference only since it not included in this schema.&#xA;  </Description>
    <CreatedAt>1690163036352</CreatedAt>
    <LastModifiedAt>1690163036352</LastModifiedAt>
    <BasePaths>/retail-sales-openapi-schema</BasePaths>
    <Policies>
        <Policy>VA-restrictAccess</Policy>
        <Policy>Q-quotaCount</Policy>
        <Policy>SA-traffic</Policy>
    </Policies>
    <ProxyEndpoints>
        <ProxyEndpoint>default</ProxyEndpoint>
    </ProxyEndpoints>
    <TargetEndpoints>
        <TargetEndpoint>default</TargetEndpoint>
    </TargetEndpoints>
</APIProxy>